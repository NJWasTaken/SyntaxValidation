
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DIVIDE ELSE EQ EQUALS FLOAT GE GT IDENTIFIER IF INT LBRACE LBRACKET LE LPAREN LT MINUS MULTIPLY NE NUMBER PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLONprogram : function_listfunction_list : function_definition\n                    | function_list function_definitionfunction_definition : INT IDENTIFIER LPAREN array_param_list RPAREN compound_statement\n                         | FLOAT IDENTIFIER LPAREN array_param_list RPAREN compound_statementcompound_statement : LBRACE statement_list RBRACEarray_param_list : array_param\n                       | param\n                       | array_param_list COMMA array_param\n                       | array_param_list COMMA param\n                       | emptyarray_param : INT IDENTIFIER LBRACKET NUMBER RBRACKET\n                  | FLOAT IDENTIFIER LBRACKET NUMBER RBRACKETparam : INT IDENTIFIER\n            | FLOAT IDENTIFIERstatement_list : statement\n                     | statement_list statement\n                     | emptystatement : declaration\n                | assignment\n                | selection_statement\n                | return_statement\n                | compound_statementdeclaration : INT var_list SEMICOLON\n                  | FLOAT var_list SEMICOLON\n                  | INT IDENTIFIER EQUALS expression SEMICOLON\n                  | FLOAT IDENTIFIER EQUALS expression SEMICOLONvar_list : variable\n                | var_list COMMA variablevariable : IDENTIFIER\n                | IDENTIFIER LBRACKET NUMBER RBRACKETassignment : IDENTIFIER EQUALS expression SEMICOLON\n                 | IDENTIFIER LBRACKET NUMBER RBRACKET EQUALS expression SEMICOLONselection_statement : IF LPAREN expression RPAREN statement\n                         | IF LPAREN expression RPAREN statement ELSE statementreturn_statement : RETURN expression SEMICOLONexpression : term\n                 | expression PLUS term\n                 | expression MINUS termterm : factor\n            | term MULTIPLY factor\n            | term DIVIDE factorfactor : NUMBER\n              | FLOAT\n              | array_access\n              | IDENTIFIER\n              | LPAREN expression RPARENarray_access : IDENTIFIER LBRACKET NUMBER RBRACKET\n                   | IDENTIFIER LBRACKET IDENTIFIER RBRACKETexpression : expression GT expression\n                 | expression LT expression\n                 | expression GE expression\n                 | expression LE expression\n                 | expression EQ expression\n                 | expression NE expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,6,9,10,20,24,25,29,31,32,33,34,35,36,37,38,46,47,65,69,74,92,94,108,110,112,116,117,118,],[4,4,-2,-3,11,11,11,-4,39,-5,39,-16,-18,-19,-20,-21,-22,-23,-6,-17,-24,-25,-36,-32,39,-26,-27,-34,39,-33,-35,]),'FLOAT':([0,2,3,6,9,10,20,24,25,29,31,32,33,34,35,36,37,38,43,46,47,53,55,63,65,67,69,70,74,75,76,77,78,79,80,81,82,83,84,92,94,108,110,111,112,116,117,118,],[5,5,-2,-3,16,16,16,-4,40,-5,40,-16,-18,-19,-20,-21,-22,-23,60,-6,-17,60,60,60,-24,60,-25,60,-36,60,60,60,60,60,60,60,60,60,60,-32,40,-26,-27,60,-34,40,-33,-35,]),'$end':([1,2,3,6,24,29,46,],[0,-1,-2,-3,-4,-5,-6,]),'IDENTIFIER':([4,5,11,16,25,31,32,33,34,35,36,37,38,39,40,43,46,47,53,55,63,65,66,67,69,70,74,75,76,77,78,79,80,81,82,83,84,85,92,94,108,110,111,112,116,117,118,],[7,8,18,21,41,41,-16,-18,-19,-20,-21,-22,-23,49,52,62,-6,-17,62,62,62,-24,88,62,-25,62,-36,62,62,62,62,62,62,62,62,62,62,105,-32,41,-26,-27,62,-34,41,-33,-35,]),'LPAREN':([7,8,42,43,53,55,63,67,70,75,76,77,78,79,80,81,82,83,84,111,],[9,10,55,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'RPAREN':([9,10,12,13,14,15,17,18,21,26,27,45,57,58,59,60,61,62,64,73,86,95,96,97,98,99,100,101,102,103,104,107,113,114,],[-56,-56,19,-7,-8,-11,22,-14,-15,-9,-10,-12,-37,-40,-43,-44,-45,-46,-13,94,107,-38,-39,-50,-51,-52,-53,-54,-55,-41,-42,-47,-49,-48,]),'COMMA':([9,10,12,13,14,15,17,18,21,26,27,45,48,49,50,51,52,64,87,88,109,],[-56,-56,20,-7,-8,-11,20,-14,-15,-9,-10,-12,66,-30,-28,66,-30,-13,-29,-30,-31,]),'LBRACKET':([18,21,41,49,52,62,88,],[23,28,54,68,68,85,68,]),'LBRACE':([19,22,25,31,32,33,34,35,36,37,38,46,47,65,69,74,92,94,108,110,112,116,117,118,],[25,25,25,25,-16,-18,-19,-20,-21,-22,-23,-6,-17,-24,-25,-36,-32,25,-26,-27,-34,25,-33,-35,]),'NUMBER':([23,28,43,53,54,55,63,67,68,70,75,76,77,78,79,80,81,82,83,84,85,111,],[30,44,59,59,72,59,59,59,90,59,59,59,59,59,59,59,59,59,59,59,106,59,]),'RBRACE':([25,31,32,33,34,35,36,37,38,46,47,65,69,74,92,108,110,112,117,118,],[-56,46,-16,-18,-19,-20,-21,-22,-23,-6,-17,-24,-25,-36,-32,-26,-27,-34,-33,-35,]),'IF':([25,31,32,33,34,35,36,37,38,46,47,65,69,74,92,94,108,110,112,116,117,118,],[42,42,-16,-18,-19,-20,-21,-22,-23,-6,-17,-24,-25,-36,-32,42,-26,-27,-34,42,-33,-35,]),'RETURN':([25,31,32,33,34,35,36,37,38,46,47,65,69,74,92,94,108,110,112,116,117,118,],[43,43,-16,-18,-19,-20,-21,-22,-23,-6,-17,-24,-25,-36,-32,43,-26,-27,-34,43,-33,-35,]),'RBRACKET':([30,44,72,90,105,106,],[45,64,93,109,113,114,]),'ELSE':([34,35,36,37,38,46,65,69,74,92,108,110,112,117,118,],[-19,-20,-21,-22,-23,-6,-24,-25,-36,-32,-26,-27,116,-33,-35,]),'EQUALS':([41,49,52,93,],[53,67,70,111,]),'SEMICOLON':([48,49,50,51,52,56,57,58,59,60,61,62,71,87,88,89,91,95,96,97,98,99,100,101,102,103,104,107,109,113,114,115,],[65,-30,-28,69,-30,74,-37,-40,-43,-44,-45,-46,92,-29,-30,108,110,-38,-39,-50,-51,-52,-53,-54,-55,-41,-42,-47,-31,-49,-48,117,]),'PLUS':([56,57,58,59,60,61,62,71,73,86,89,91,95,96,97,98,99,100,101,102,103,104,107,113,114,115,],[75,-37,-40,-43,-44,-45,-46,75,75,75,75,75,-38,-39,75,75,75,75,75,75,-41,-42,-47,-49,-48,75,]),'MINUS':([56,57,58,59,60,61,62,71,73,86,89,91,95,96,97,98,99,100,101,102,103,104,107,113,114,115,],[76,-37,-40,-43,-44,-45,-46,76,76,76,76,76,-38,-39,76,76,76,76,76,76,-41,-42,-47,-49,-48,76,]),'GT':([56,57,58,59,60,61,62,71,73,86,89,91,95,96,97,98,99,100,101,102,103,104,107,113,114,115,],[77,-37,-40,-43,-44,-45,-46,77,77,77,77,77,-38,-39,77,77,77,77,77,77,-41,-42,-47,-49,-48,77,]),'LT':([56,57,58,59,60,61,62,71,73,86,89,91,95,96,97,98,99,100,101,102,103,104,107,113,114,115,],[78,-37,-40,-43,-44,-45,-46,78,78,78,78,78,-38,-39,78,78,78,78,78,78,-41,-42,-47,-49,-48,78,]),'GE':([56,57,58,59,60,61,62,71,73,86,89,91,95,96,97,98,99,100,101,102,103,104,107,113,114,115,],[79,-37,-40,-43,-44,-45,-46,79,79,79,79,79,-38,-39,79,79,79,79,79,79,-41,-42,-47,-49,-48,79,]),'LE':([56,57,58,59,60,61,62,71,73,86,89,91,95,96,97,98,99,100,101,102,103,104,107,113,114,115,],[80,-37,-40,-43,-44,-45,-46,80,80,80,80,80,-38,-39,80,80,80,80,80,80,-41,-42,-47,-49,-48,80,]),'EQ':([56,57,58,59,60,61,62,71,73,86,89,91,95,96,97,98,99,100,101,102,103,104,107,113,114,115,],[81,-37,-40,-43,-44,-45,-46,81,81,81,81,81,-38,-39,81,81,81,81,81,81,-41,-42,-47,-49,-48,81,]),'NE':([56,57,58,59,60,61,62,71,73,86,89,91,95,96,97,98,99,100,101,102,103,104,107,113,114,115,],[82,-37,-40,-43,-44,-45,-46,82,82,82,82,82,-38,-39,82,82,82,82,82,82,-41,-42,-47,-49,-48,82,]),'MULTIPLY':([57,58,59,60,61,62,95,96,103,104,107,113,114,],[83,-40,-43,-44,-45,-46,83,83,-41,-42,-47,-49,-48,]),'DIVIDE':([57,58,59,60,61,62,95,96,103,104,107,113,114,],[84,-40,-43,-44,-45,-46,84,84,-41,-42,-47,-49,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_list':([0,],[2,]),'function_definition':([0,2,],[3,6,]),'array_param_list':([9,10,],[12,17,]),'array_param':([9,10,20,],[13,13,26,]),'param':([9,10,20,],[14,14,27,]),'empty':([9,10,25,],[15,15,33,]),'compound_statement':([19,22,25,31,94,116,],[24,29,38,38,38,38,]),'statement_list':([25,],[31,]),'statement':([25,31,94,116,],[32,47,112,118,]),'declaration':([25,31,94,116,],[34,34,34,34,]),'assignment':([25,31,94,116,],[35,35,35,35,]),'selection_statement':([25,31,94,116,],[36,36,36,36,]),'return_statement':([25,31,94,116,],[37,37,37,37,]),'var_list':([39,40,],[48,51,]),'variable':([39,40,66,],[50,50,87,]),'expression':([43,53,55,63,67,70,77,78,79,80,81,82,111,],[56,71,73,86,89,91,97,98,99,100,101,102,115,]),'term':([43,53,55,63,67,70,75,76,77,78,79,80,81,82,111,],[57,57,57,57,57,57,95,96,57,57,57,57,57,57,57,]),'factor':([43,53,55,63,67,70,75,76,77,78,79,80,81,82,83,84,111,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,103,104,58,]),'array_access':([43,53,55,63,67,70,75,76,77,78,79,80,81,82,83,84,111,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_list','program',1,'p_program','parser.py',5),
  ('function_list -> function_definition','function_list',1,'p_function_list','parser.py',9),
  ('function_list -> function_list function_definition','function_list',2,'p_function_list','parser.py',10),
  ('function_definition -> INT IDENTIFIER LPAREN array_param_list RPAREN compound_statement','function_definition',6,'p_function_definition','parser.py',17),
  ('function_definition -> FLOAT IDENTIFIER LPAREN array_param_list RPAREN compound_statement','function_definition',6,'p_function_definition','parser.py',18),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','parser.py',22),
  ('array_param_list -> array_param','array_param_list',1,'p_array_param_list','parser.py',26),
  ('array_param_list -> param','array_param_list',1,'p_array_param_list','parser.py',27),
  ('array_param_list -> array_param_list COMMA array_param','array_param_list',3,'p_array_param_list','parser.py',28),
  ('array_param_list -> array_param_list COMMA param','array_param_list',3,'p_array_param_list','parser.py',29),
  ('array_param_list -> empty','array_param_list',1,'p_array_param_list','parser.py',30),
  ('array_param -> INT IDENTIFIER LBRACKET NUMBER RBRACKET','array_param',5,'p_array_param','parser.py',40),
  ('array_param -> FLOAT IDENTIFIER LBRACKET NUMBER RBRACKET','array_param',5,'p_array_param','parser.py',41),
  ('param -> INT IDENTIFIER','param',2,'p_param','parser.py',45),
  ('param -> FLOAT IDENTIFIER','param',2,'p_param','parser.py',46),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',50),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',51),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',52),
  ('statement -> declaration','statement',1,'p_statement','parser.py',56),
  ('statement -> assignment','statement',1,'p_statement','parser.py',57),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',58),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',59),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',60),
  ('declaration -> INT var_list SEMICOLON','declaration',3,'p_declaration','parser.py',64),
  ('declaration -> FLOAT var_list SEMICOLON','declaration',3,'p_declaration','parser.py',65),
  ('declaration -> INT IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',66),
  ('declaration -> FLOAT IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',67),
  ('var_list -> variable','var_list',1,'p_var_list','parser.py',71),
  ('var_list -> var_list COMMA variable','var_list',3,'p_var_list','parser.py',72),
  ('variable -> IDENTIFIER','variable',1,'p_variable','parser.py',76),
  ('variable -> IDENTIFIER LBRACKET NUMBER RBRACKET','variable',4,'p_variable','parser.py',77),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','parser.py',81),
  ('assignment -> IDENTIFIER LBRACKET NUMBER RBRACKET EQUALS expression SEMICOLON','assignment',7,'p_assignment','parser.py',82),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',86),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',87),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',94),
  ('expression -> term','expression',1,'p_expression','parser.py',98),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',99),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',100),
  ('term -> factor','term',1,'p_term','parser.py',104),
  ('term -> term MULTIPLY factor','term',3,'p_term','parser.py',105),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',106),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',110),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',111),
  ('factor -> array_access','factor',1,'p_factor','parser.py',112),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',113),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',114),
  ('array_access -> IDENTIFIER LBRACKET NUMBER RBRACKET','array_access',4,'p_array_access','parser.py',118),
  ('array_access -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET','array_access',4,'p_array_access','parser.py',119),
  ('expression -> expression GT expression','expression',3,'p_comparison','parser.py',123),
  ('expression -> expression LT expression','expression',3,'p_comparison','parser.py',124),
  ('expression -> expression GE expression','expression',3,'p_comparison','parser.py',125),
  ('expression -> expression LE expression','expression',3,'p_comparison','parser.py',126),
  ('expression -> expression EQ expression','expression',3,'p_comparison','parser.py',127),
  ('expression -> expression NE expression','expression',3,'p_comparison','parser.py',128),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',132),
]
